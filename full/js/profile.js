document.addEventListener("DOMContentLoaded", async () => {
  const username = localStorage.getItem("username");

  if (!username) {
    window.location.href = "login.html";
    return;
  }

  try {
    // 1Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ user_id –ø–æ username
    const userResponse = await fetch("/get_user_id", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username }),
    });

    const userData = await userResponse.json();
    const userId = userData.userId;

    if (!userId) throw new Error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ userId");

    // 2Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é
    const profileResponse = await fetch("/profile_data", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ userId }),
    });

    const profile = await profileResponse.json();
    document.getElementById("full-name").textContent = profile.full_name || "";
    document.getElementById("phone").textContent = profile.phone || "";
    document.getElementById("email").textContent = profile.email || "";

    if (profile.birth_date) {
      const birthDate = new Date(profile.birth_date);
      const today = new Date();
      let age = today.getFullYear() - birthDate.getFullYear();
      const m = today.getMonth() - birthDate.getMonth();
      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) age--;
      document.getElementById("birth-date").textContent = `${age} —Ä–æ–∫—ñ–≤`;
    }

    // 3Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∏
    try {
      const subsResponse = await fetch("/user-subscriptions", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId }),
      });

      if (!subsResponse.ok) throw new Error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ñ–≤");

      const subscriptions = await subsResponse.json();
      const subscriptionBlock = document.querySelector(".subscription-block");

      if (subscriptions.length === 0) {
        subscriptionBlock.innerHTML += "<p>–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ñ–≤.</p>";
      } else {
        subscriptions.forEach((sub) => {
          const purchaseDate = new Date(sub.purchase_date);
          const endDate = new Date(purchaseDate);
          let subscriptionType = sub.type;
          let displayText = "";

          switch (sub.type) {
            case "gym":
              subscriptionType = "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω–∏–π –∑–∞–ª";
              endDate.setDate(endDate.getDate() + sub.duration);
              displayText = `–î—ñ–π—Å–Ω–∏–π –¥–æ ${endDate.toISOString().split("T")[0]}`;
              break;
            case "fitness":
              subscriptionType = "–§—ñ—Ç–Ω–µ—Å";
              displayText = `${sub.duration} –∑–∞–Ω—è—Ç—å –∑–∞–ª–∏—à–∏–ª–æ—Å—è`;
              break;
            case "boxing":
              subscriptionType = "–ë–æ–∫—Å";
              displayText = `${sub.duration} –∑–∞–Ω—è—Ç—å –∑–∞–ª–∏—à–∏–ª–æ—Å—è`;
              break;
            default:
              displayText = "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞";
          }

          subscriptionBlock.innerHTML += `<p>${subscriptionType} ‚Äî ${displayText}</p>`;
        });
      }

      // 4Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
      await loadProgress(userId);

      // 5Ô∏è‚É£ –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
      document.getElementById("add-progress-form").addEventListener("submit", async (e) => {
        e.preventDefault();
        const weight = document.getElementById("weight").value;

        const res = await fetch("/progress-add", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userId, weight }),
        });

        if (res.ok) {
          e.target.reset();
          loadProgress(userId);
        } else {
          alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –≤–∞–≥—É");
        }
      });

    } catch (err) {
      console.error("Fetch subscriptions error:", err);
    }
  } catch (err) {
    console.error("Fetch profile error:", err);
  }
});

// üìä –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
async function loadProgress(userId) {
  const res = await fetch("/progress", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ userId })
  });

  const data = await res.json();
  const container = document.getElementById("progress-list");
  container.innerHTML = "";

  data.forEach(entry => {
    const div = document.createElement("div");
    div.classList.add("progress-entry");
    div.innerHTML = `
      <p><strong>${new Date(entry.record_date).toLocaleDateString()}</strong></p>
      <p>–í–∞–≥–∞: ${entry.weight} –∫–≥</p>
      <p>–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è: ${entry.visits}</p>
    `;
    container.appendChild(div);
  });
}
let chartInstance = null; // –≥–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–Ω–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞

async function loadProgress(userId) {
  const res = await fetch("/progress", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ userId })
  });

  const data = await res.json();
  const container = document.getElementById("progress-list");
  container.innerHTML = "";

  const labels = [];
  const weightData = [];
  const visitsData = [];

  data.forEach(entry => {
    const date = new Date(entry.record_date).toLocaleDateString();
    labels.push(date);
    weightData.push(entry.weight);
    visitsData.push(entry.visits);

    const div = document.createElement("div");
    div.classList.add("progress-entry");
    div.innerHTML = `
      <p><strong>${date}</strong></p>
      <p>–í–∞–≥–∞: ${entry.weight} –∫–≥</p>
      <p>–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è: ${entry.visits}</p>
    `;
    container.appendChild(div);
  });

  // –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
  const ctx = document.getElementById("progressChart").getContext("2d");
  if (chartInstance) {
    chartInstance.destroy(); // –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≥—Ä–∞—Ñ—ñ–∫, —è–∫—â–æ —î
  }

  chartInstance = new Chart(ctx, {
    type: "line",
    data: {
      labels,
      datasets: [
        {
          label: "–í–∞–≥–∞ (–∫–≥)",
          data: weightData,
          borderColor: "rgba(75, 192, 192, 1)",
          backgroundColor: "rgba(75, 192, 192, 0.2)",
          tension: 0.3
        },
        {
          label: "–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è",
          data: visitsData,
          borderColor: "rgba(255, 99, 132, 1)",
          backgroundColor: "rgba(255, 99, 132, 0.2)",
          tension: 0.3
        }
      ]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
}